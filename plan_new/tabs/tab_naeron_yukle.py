import pandas as pd
import sqlite3
import streamlit as st
from datetime import datetime as dt, date

# Benzersiz u√ßu≈ü numarasƒ± olu≈üturma
def generate_ucus_no(d, idx):
    return f"NRS-{d.strftime('%Y%m%d')}-{idx:03}"

# Belirli bir tarih i√ßin son index'i veritabanƒ±ndan alma
def get_last_index_for_date(conn, d):
    query = "SELECT ucus_no FROM naeron_ucuslar WHERE ucus_no LIKE ? ORDER BY ucus_no DESC LIMIT 1"
    cursor = conn.execute(query, (f"NRS-{d.strftime('%Y%m%d')}-%",))
    result = cursor.fetchone()
    if result:
        last_ucus_no = result[0]
        return int(last_ucus_no.split("-")[-1])
    return 0


def tab_naeron_yukle(st, secilen_tarih, conn_main):
    sekme1, sekme2 , sekme3 = st.tabs([
        "üìÜ Aylƒ±k Veri Y√ºkle",
        "üìÜ Tarih Aralƒ±ƒüƒ± Veri Y√ºkle",
        "üìÜ G√ºnl√ºk Veri Y√ºkle"
    ])

    # --- Aylƒ±k Y√ºkleme Sekmesi ---
    with sekme1:
        st.subheader("üì§ Naeron Verilerini Y√ºkle (Se√ßilen Ay)")
        uploaded_file_month = st.file_uploader(
            "Naeron formatlƒ± Excel dosyasƒ±nƒ± y√ºkleyin", type=["xlsx"], key="monthly"
        )
        yil = st.number_input(
            "Yƒ±l", min_value=2000, max_value=dt.now().year,
            value=dt.now().year, step=1, key="yil"
        )
        ay = st.selectbox(
            "Ay", list(range(1, 13)), index=dt.now().month-1, key="ay"
        )

        if uploaded_file_month:
            df = pd.read_excel(uploaded_file_month)
            df.columns = [c.strip() for c in df.columns]
            beklenen = [
                "U√ßu≈ü Tarihi 2", "√áaƒürƒ±", "Off Bl.", "On Bl.",
                "Block Time", "Flight Time", "√ñƒüretmen Pilot",
                "√ñƒürenci Pilot", "Kalkƒ±≈ü", "ƒ∞ni≈ü", "G√∂rev",
                "Engine", "IFR S√ºresi"
            ]
            eksik = [s for s in beklenen if s not in df.columns]
            if eksik:
                st.error(f"‚ùå Eksik s√ºtun(lar): {', '.join(eksik)}")
                return

            df = df[beklenen]
            df["U√ßu≈ü Tarihi 2"] = pd.to_datetime(
                df["U√ßu≈ü Tarihi 2"], errors="coerce"
            ).dt.date
            # Sadece se√ßilen yƒ±l ve ay
            df = df[
                (pd.DatetimeIndex(df["U√ßu≈ü Tarihi 2"]).year == yil) &
                (pd.DatetimeIndex(df["U√ßu≈ü Tarihi 2"]).month == ay)
            ]
            if df.empty:
                st.warning(f"‚ö†Ô∏è Se√ßilen {yil}-{ay:02} i√ßin veri bulunamadƒ±.")
                return

            # Veritabanƒ± ve tablo kontrol√º
            conn = sqlite3.connect("plan_new/naeron_kayitlari.db")
            conn.execute("""
                CREATE TABLE IF NOT EXISTS naeron_ucuslar (
                    ucus_no TEXT PRIMARY KEY,
                    "U√ßu≈ü Tarihi 2" TEXT,
                    "√áaƒürƒ±" TEXT,
                    "Off Bl." TEXT,
                    "On Bl." TEXT,
                    "Block Time" TEXT,
                    "Flight Time" TEXT,
                    "√ñƒüretmen Pilot" TEXT,
                    "√ñƒürenci Pilot" TEXT,
                    "Kalkƒ±≈ü" TEXT,
                    "ƒ∞ni≈ü" TEXT,
                    "G√∂rev" TEXT,
                    "Engine" TEXT,
                    "IFR S√ºresi" TEXT
                )
            """)

            existing = pd.read_sql_query("SELECT * FROM naeron_ucuslar", conn)
            existing_keys = set(
                (row["U√ßu≈ü Tarihi 2"], row["√ñƒürenci Pilot"], row["G√∂rev"])
                for _, row in existing.iterrows()
            )

            yeni_kayitlar = []
            last_index_by_date = {}
            for _, row in df.iterrows():
                d = row["U√ßu≈ü Tarihi 2"]
                key = (str(d), row["√ñƒürenci Pilot"], row["G√∂rev"])
                if key in existing_keys:
                    continue
                if d not in last_index_by_date:
                    last_index_by_date[d] = get_last_index_for_date(conn, d) + 1
                idx = last_index_by_date[d]
                ucus_no = generate_ucus_no(d, idx)
                last_index_by_date[d] += 1
                yeni_kayitlar.append({"ucus_no": ucus_no, **row.to_dict()})

            if yeni_kayitlar:
                df_yeni = pd.DataFrame(yeni_kayitlar)
                st.dataframe(df_yeni, use_container_width=True)
                if st.button("üíæ Aylƒ±k Verileri Aktar"):
                    df_yeni.to_sql("naeron_ucuslar", conn, if_exists="append", index=False)
                    # Log ay ilk g√ºn olarak kaydet
                    log_date = date(yil, ay, 1)
                    cursor_main = conn_main.cursor()
                    cursor_main.execute(
                        "REPLACE INTO naeron_log (tarih, kayit_sayisi) VALUES (?, ?)",
                        (str(log_date), len(df_yeni))
                    )
                    conn_main.commit()
                    conn.close()
                    st.success("üßæ Aylƒ±k kayƒ±tlar aktarƒ±ldƒ± ve log g√ºncellendi.")
            else:
                st.info("‚ö†Ô∏è Yeni kayƒ±t bulunamadƒ±. Hepsi zaten mevcut.")

    # --- Tarih Aralƒ±ƒüƒ± Sekmesi ---
    with sekme2:
        st.subheader("üìÜ Tarih Aralƒ±ƒüƒ±na G√∂re Veri Y√ºkle")
        uploaded_file_range = st.file_uploader(
            "Naeron formatlƒ± Excel dosyasƒ±nƒ± y√ºkleyin", type=["xlsx"], key="range"
        )
        tarih_baslangic = st.date_input("Ba≈ülangƒ±√ß Tarihi")
        tarih_bitis = st.date_input("Biti≈ü Tarihi")

        if uploaded_file_range:
            # 1) Oku ve filtrele
            df_range = pd.read_excel(uploaded_file_range)
            df_range.columns = [c.strip() for c in df_range.columns]
            beklenen = [
                "U√ßu≈ü Tarihi 2", "√áaƒürƒ±", "Off Bl.", "On Bl.",
                "Block Time", "Flight Time", "√ñƒüretmen Pilot",
                "√ñƒürenci Pilot", "Kalkƒ±≈ü", "ƒ∞ni≈ü", "G√∂rev",
                "Engine", "IFR S√ºresi"
            ]
            eksik = [s for s in beklenen if s not in df_range.columns]
            if eksik:
                st.error(f"‚ùå Eksik s√ºtun(lar): {', '.join(eksik)}")
                return

            df_range["U√ßu≈ü Tarihi 2"] = pd.to_datetime(
                df_range["U√ßu≈ü Tarihi 2"], errors="coerce"
            ).dt.date
            df_range = df_range[
                (df_range["U√ßu≈ü Tarihi 2"] >= tarih_baslangic) &
                (df_range["U√ßu≈ü Tarihi 2"] <= tarih_bitis)
            ]

            if df_range.empty:
                st.warning(f"‚ö†Ô∏è {tarih_baslangic} ‚Äì {tarih_bitis} aralƒ±ƒüƒ±nda veri yok.")
                return

            # 2) √ñnizleme
            st.markdown("### üîé √ñnizleme")
            st.dataframe(df_range, use_container_width=True)

            # 3) U√ßu≈ü no √ºretimi ve yeni kayƒ±tlarƒ± olu≈üturma
            conn = sqlite3.connect("plan_new/naeron_kayitlari.db")
            conn.execute("""
                CREATE TABLE IF NOT EXISTS naeron_ucuslar (
                    ucus_no TEXT PRIMARY KEY,
                    "U√ßu≈ü Tarihi 2" TEXT, "√áaƒürƒ±" TEXT, "Off Bl." TEXT,
                    "On Bl." TEXT, "Block Time" TEXT, "Flight Time" TEXT,
                    "√ñƒüretmen Pilot" TEXT, "√ñƒürenci Pilot" TEXT,
                    "Kalkƒ±≈ü" TEXT, "ƒ∞ni≈ü" TEXT, "G√∂rev" TEXT,
                    "Engine" TEXT, "IFR S√ºresi" TEXT
                )
            """)
            existing = pd.read_sql_query("SELECT * FROM naeron_ucuslar", conn)
            existing_keys = {
                (r["U√ßu≈ü Tarihi 2"], r["√ñƒürenci Pilot"], r["G√∂rev"])
                for _, r in existing.iterrows()
            }

            yeni_kayitlar = []
            last_index_by_date = {}
            for _, row in df_range.iterrows():
                d = row["U√ßu≈ü Tarihi 2"]
                key = (str(d), row["√ñƒürenci Pilot"], row["G√∂rev"])
                if key in existing_keys:
                    continue
                # tarih i√ßin bir kez index al
                if d not in last_index_by_date:
                    last_index_by_date[d] = get_last_index_for_date(conn, d) + 1
                idx = last_index_by_date[d]
                ucus_no = generate_ucus_no(d, idx)
                last_index_by_date[d] += 1

                yeni_kayitlar.append({
                    "ucus_no": ucus_no,
                    **row.to_dict()
                })

            conn.close()

            if not yeni_kayitlar:
                st.info("‚ö†Ô∏è Yeni kayƒ±t bulunamadƒ±. Hepsi zaten mevcut.")
                return

            df_yeni = pd.DataFrame(yeni_kayitlar)
            st.markdown("### ‚úàÔ∏è Olu≈üturulacak Kayƒ±tlar")
            st.dataframe(df_yeni, use_container_width=True)

            # 4) Aktarma butonu
            if st.button("üíæ Tarih Aralƒ±ƒüƒ± Verilerini Aktar"):
                conn = sqlite3.connect("plan_new/naeron_kayitlari.db")
                df_yeni.to_sql("naeron_ucuslar", conn, if_exists="append", index=False)

                # Log'u da kaydet (isteƒüe baƒülƒ±: ba≈ülangƒ±√ß tarihiyle)
                cursor_main = conn_main.cursor()
                cursor_main.execute(
                    "REPLACE INTO naeron_log (tarih, kayit_sayisi) VALUES (?, ?)",
                    (str(tarih_baslangic), len(df_yeni))
                )
                conn_main.commit()
                conn.close()

                st.success(f"üßæ {len(df_yeni)} kayƒ±t ba≈üarƒ±yla aktarƒ±ldƒ± ve log g√ºncellendi.")




    with sekme3:
        with st.expander("üìÇ Naeron Sekmesi", expanded=True):
            uploaded_file = st.file_uploader("Naeron formatlƒ± Excel dosyasƒ±nƒ± y√ºkleyin", type=["xlsx"])

        st.subheader("üì§ Naeron Verilerini Y√ºkle (Sadece Se√ßilen G√ºn)")

        # Naeron Loglarƒ±nƒ± y√ºkle
        df_log = pd.read_sql_query("SELECT * FROM naeron_log", conn_main, parse_dates=["tarih"])
        if not df_log.empty:
            df_log = df_log.sort_values("tarih")
            df_log["Durum"] = df_log["kayit_sayisi"].apply(lambda x: "‚úÖ" if x > 0 else "")
            df_log["Ay"] = df_log["tarih"].dt.strftime("%Y-%m")

            sec_ay = st.selectbox("üìÜ Ay se√ßin", sorted(df_log["Ay"].unique(), reverse=True))
            secili_ay_df = df_log[df_log["Ay"] == sec_ay]

            st.markdown("### üìÖ Veri Girilen G√ºnler")
            secili_ay_df_view = secili_ay_df[["tarih", "kayit_sayisi", "Durum"]].rename(columns={
                "tarih": "Tarih", "kayit_sayisi": "Kayƒ±t Sayƒ±sƒ±"
            }).reset_index(drop=True)

            selected_row = st.radio("Detayƒ±nƒ± g√∂rmek istediƒüiniz g√ºn", secili_ay_df_view["Tarih"].astype(str))

            st.table(secili_ay_df_view)

            conn = sqlite3.connect("plan_new/naeron_kayitlari.db")
            if selected_row:
                detay_df = pd.read_sql_query("SELECT * FROM naeron_ucuslar WHERE `U√ßu≈ü Tarihi 2` = ?", conn, params=[selected_row])
                if not detay_df.empty:
                    st.markdown(f"### üìÑ {selected_row} tarihli u√ßu≈ü detaylarƒ±")
                    st.dataframe(detay_df, use_container_width=True)
                else:
                    st.info(f"üì≠ {selected_row} g√ºn√º i√ßin detaylƒ± kayƒ±t bulunamadƒ±.")

        st.markdown("Veri y√ºklendikten sonra a≈üaƒüƒ±daki 'Naeron Y√ºkle' butonunu kullanƒ±n.")

        if uploaded_file:
            try:
                df = pd.read_excel(uploaded_file)
                df.columns = [c.strip() for c in df.columns]

                beklenen = [
                    "U√ßu≈ü Tarihi 2", "√áaƒürƒ±", "Off Bl.", "On Bl.", "Block Time", "Flight Time",
                    "√ñƒüretmen Pilot", "√ñƒürenci Pilot", "Kalkƒ±≈ü", "ƒ∞ni≈ü", "G√∂rev", "Engine", "IFR S√ºresi"
                ]
                eksik = [s for s in beklenen if s not in df.columns]
                if eksik:
                    st.error(f"‚ùå Eksik s√ºtun(lar): {', '.join(eksik)}")
                    return

                df = df[beklenen]
                df["U√ßu≈ü Tarihi 2"] = pd.to_datetime(df["U√ßu≈ü Tarihi 2"], errors="coerce").dt.date

                df = df[df["U√ßu≈ü Tarihi 2"] == secilen_tarih]
                if df.empty:
                    st.warning(f"‚ö†Ô∏è Se√ßilen tarih ({secilen_tarih}) i√ßin veri bulunamadƒ±.")
                    return

                for col in ["Off Bl.", "On Bl.", "Block Time", "Flight Time"]:
                    df[col] = df[col].astype(str)

                conn = sqlite3.connect("plan_new/naeron_kayitlari.db")
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS naeron_ucuslar (
                        ucus_no TEXT PRIMARY KEY,
                        "U√ßu≈ü Tarihi 2" TEXT, "√áaƒürƒ±" TEXT, "Off Bl." TEXT, "On Bl." TEXT,
                        "Block Time" TEXT, "Flight Time" TEXT, "√ñƒüretmen Pilot" TEXT, "√ñƒürenci Pilot" TEXT,
                        "Kalkƒ±≈ü" TEXT, "ƒ∞ni≈ü" TEXT, "G√∂rev" TEXT, "Engine" TEXT, "IFR S√ºresi" TEXT
                    )
                """)

                existing = pd.read_sql_query("SELECT * FROM naeron_ucuslar", conn)
                existing_keys = set((row["U√ßu≈ü Tarihi 2"], row["√ñƒürenci Pilot"], row["G√∂rev"]) for _, row in existing.iterrows())

                yeni_kayitlar = []
                last_index = get_last_index_for_date(conn, secilen_tarih)
                index = last_index + 1

                for _, row in df.iterrows():
                    key = (str(row["U√ßu≈ü Tarihi 2"]), row["√ñƒürenci Pilot"], row["G√∂rev"])
                    if key not in existing_keys:
                        ucus_no = generate_ucus_no(pd.to_datetime(row["U√ßu≈ü Tarihi 2"]), index)
                        index += 1
                        yeni_kayitlar.append({"ucus_no": ucus_no, **row.to_dict()})

                if not yeni_kayitlar:
                    st.info("‚ö†Ô∏è Yeni kayƒ±t bulunamadƒ±. Hepsi zaten mevcut.")
                    return

                df_yeni = pd.DataFrame(yeni_kayitlar)
                st.success(f"‚úÖ {len(df_yeni)} yeni kayƒ±t aktarƒ±lacak.")
                st.dataframe(df_yeni, use_container_width=True)

                if st.button("üíæ Veritabanƒ±na Aktar"):
                    df_yeni.to_sql("plan_new/naeron_ucuslar", conn, if_exists="append", index=False)
                    cursor_main = conn_main.cursor()
                    cursor_main.execute("REPLACE INTO naeron_log (tarih, kayit_sayisi) VALUES (?, ?)",
                                        (str(secilen_tarih), len(df_yeni)))
                    conn_main.commit()
                    conn.close()
                    st.success("üßæ Kayƒ±tlar aktarƒ±ldƒ± ve log g√ºncellendi.")

            except Exception as e:
                st.error(f"‚ùå Hata olu≈ütu: {e}")
